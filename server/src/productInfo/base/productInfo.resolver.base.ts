/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateProductInfoArgs } from "./CreateProductInfoArgs";
import { UpdateProductInfoArgs } from "./UpdateProductInfoArgs";
import { DeleteProductInfoArgs } from "./DeleteProductInfoArgs";
import { ProductInfoFindManyArgs } from "./ProductInfoFindManyArgs";
import { ProductInfoFindUniqueArgs } from "./ProductInfoFindUniqueArgs";
import { ProductInfo } from "./ProductInfo";
import { ProductInfoService } from "../productInfo.service";

@graphql.Resolver(() => ProductInfo)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ProductInfoResolverBase {
  constructor(
    protected readonly service: ProductInfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProductInfo",
    action: "read",
    possession: "any",
  })
  async _productInfosMeta(
    @graphql.Args() args: ProductInfoFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProductInfo])
  @nestAccessControl.UseRoles({
    resource: "ProductInfo",
    action: "read",
    possession: "any",
  })
  async productInfos(
    @graphql.Args() args: ProductInfoFindManyArgs
  ): Promise<ProductInfo[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProductInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductInfo",
    action: "read",
    possession: "own",
  })
  async productInfo(
    @graphql.Args() args: ProductInfoFindUniqueArgs
  ): Promise<ProductInfo | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductInfo)
  @nestAccessControl.UseRoles({
    resource: "ProductInfo",
    action: "create",
    possession: "any",
  })
  async createProductInfo(
    @graphql.Args() args: CreateProductInfoArgs
  ): Promise<ProductInfo> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductInfo)
  @nestAccessControl.UseRoles({
    resource: "ProductInfo",
    action: "update",
    possession: "any",
  })
  async updateProductInfo(
    @graphql.Args() args: UpdateProductInfoArgs
  ): Promise<ProductInfo | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductInfo)
  @nestAccessControl.UseRoles({
    resource: "ProductInfo",
    action: "delete",
    possession: "any",
  })
  async deleteProductInfo(
    @graphql.Args() args: DeleteProductInfoArgs
  ): Promise<ProductInfo | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
