/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SupplierInfoService } from "../supplierInfo.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SupplierInfoCreateInput } from "./SupplierInfoCreateInput";
import { SupplierInfoWhereInput } from "./SupplierInfoWhereInput";
import { SupplierInfoWhereUniqueInput } from "./SupplierInfoWhereUniqueInput";
import { SupplierInfoFindManyArgs } from "./SupplierInfoFindManyArgs";
import { SupplierInfoUpdateInput } from "./SupplierInfoUpdateInput";
import { SupplierInfo } from "./SupplierInfo";
import { ProductInfoFindManyArgs } from "../../productInfo/base/ProductInfoFindManyArgs";
import { ProductInfo } from "../../productInfo/base/ProductInfo";
import { ProductInfoWhereUniqueInput } from "../../productInfo/base/ProductInfoWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SupplierInfoControllerBase {
  constructor(
    protected readonly service: SupplierInfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "SupplierInfo",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SupplierInfo })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(
    @common.Body() data: SupplierInfoCreateInput
  ): Promise<SupplierInfo> {
    return await this.service.create({
      data: data,
      select: {
        address: true,
        bankAccount: true,
        bankName: true,
        createdAt: true,
        id: true,
        linkMan: true,
        phoneNumber: true,
        supplierCode: true,
        supplierName: true,
        supplierStatus: true,
        supplierType: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "SupplierInfo",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [SupplierInfo] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(SupplierInfoFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<SupplierInfo[]> {
    const args = plainToClass(SupplierInfoFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        address: true,
        bankAccount: true,
        bankName: true,
        createdAt: true,
        id: true,
        linkMan: true,
        phoneNumber: true,
        supplierCode: true,
        supplierName: true,
        supplierStatus: true,
        supplierType: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "SupplierInfo",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SupplierInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: SupplierInfoWhereUniqueInput
  ): Promise<SupplierInfo | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        address: true,
        bankAccount: true,
        bankName: true,
        createdAt: true,
        id: true,
        linkMan: true,
        phoneNumber: true,
        supplierCode: true,
        supplierName: true,
        supplierStatus: true,
        supplierType: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "SupplierInfo",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SupplierInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: SupplierInfoWhereUniqueInput,
    @common.Body() data: SupplierInfoUpdateInput
  ): Promise<SupplierInfo | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          address: true,
          bankAccount: true,
          bankName: true,
          createdAt: true,
          id: true,
          linkMan: true,
          phoneNumber: true,
          supplierCode: true,
          supplierName: true,
          supplierStatus: true,
          supplierType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "SupplierInfo",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SupplierInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: SupplierInfoWhereUniqueInput
  ): Promise<SupplierInfo | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          address: true,
          bankAccount: true,
          bankName: true,
          createdAt: true,
          id: true,
          linkMan: true,
          phoneNumber: true,
          supplierCode: true,
          supplierName: true,
          supplierStatus: true,
          supplierType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "ProductInfo",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/productSupplierId")
  @ApiNestedQuery(ProductInfoFindManyArgs)
  async findManyProductSupplierId(
    @common.Req() request: Request,
    @common.Param() params: SupplierInfoWhereUniqueInput
  ): Promise<ProductInfo[]> {
    const query = plainToClass(ProductInfoFindManyArgs, request.query);
    const results = await this.service.findProductSupplierId(params.id, {
      ...query,
      select: {
        auditStatus: true,
        averageCost: true,
        barCode: true,

        brandId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        descript: true,
        id: true,

        oneCategoryId: {
          select: {
            id: true,
          },
        },

        price: true,
        productCore: true,
        productionDate: true,
        productKeywords: true,
        productName: true,
        productSubtitle: true,
        publishStatus: true,
        purchasePrice: true,
        qrCode: true,
        shelfLife: true,

        supplierId: {
          select: {
            id: true,
          },
        },

        threeCategoryId: {
          select: {
            id: true,
          },
        },

        twoCategoryId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "SupplierInfo",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/productSupplierId")
  async connectProductSupplierId(
    @common.Param() params: SupplierInfoWhereUniqueInput,
    @common.Body() body: ProductInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productSupplierId: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "SupplierInfo",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/productSupplierId")
  async updateProductSupplierId(
    @common.Param() params: SupplierInfoWhereUniqueInput,
    @common.Body() body: ProductInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productSupplierId: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "SupplierInfo",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/productSupplierId")
  async disconnectProductSupplierId(
    @common.Param() params: SupplierInfoWhereUniqueInput,
    @common.Body() body: ProductInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productSupplierId: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
