/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateProductPicInfoArgs } from "./CreateProductPicInfoArgs";
import { UpdateProductPicInfoArgs } from "./UpdateProductPicInfoArgs";
import { DeleteProductPicInfoArgs } from "./DeleteProductPicInfoArgs";
import { ProductPicInfoFindManyArgs } from "./ProductPicInfoFindManyArgs";
import { ProductPicInfoFindUniqueArgs } from "./ProductPicInfoFindUniqueArgs";
import { ProductPicInfo } from "./ProductPicInfo";
import { ProductInfo } from "../../productInfo/base/ProductInfo";
import { ProductPicInfoService } from "../productPicInfo.service";

@graphql.Resolver(() => ProductPicInfo)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ProductPicInfoResolverBase {
  constructor(
    protected readonly service: ProductPicInfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProductPicInfo",
    action: "read",
    possession: "any",
  })
  async _productPicInfosMeta(
    @graphql.Args() args: ProductPicInfoFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProductPicInfo])
  @nestAccessControl.UseRoles({
    resource: "ProductPicInfo",
    action: "read",
    possession: "any",
  })
  async productPicInfos(
    @graphql.Args() args: ProductPicInfoFindManyArgs
  ): Promise<ProductPicInfo[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProductPicInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductPicInfo",
    action: "read",
    possession: "own",
  })
  async productPicInfo(
    @graphql.Args() args: ProductPicInfoFindUniqueArgs
  ): Promise<ProductPicInfo | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductPicInfo)
  @nestAccessControl.UseRoles({
    resource: "ProductPicInfo",
    action: "create",
    possession: "any",
  })
  async createProductPicInfo(
    @graphql.Args() args: CreateProductPicInfoArgs
  ): Promise<ProductPicInfo> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        productId: args.data.productId
          ? {
              connect: args.data.productId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductPicInfo)
  @nestAccessControl.UseRoles({
    resource: "ProductPicInfo",
    action: "update",
    possession: "any",
  })
  async updateProductPicInfo(
    @graphql.Args() args: UpdateProductPicInfoArgs
  ): Promise<ProductPicInfo | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          productId: args.data.productId
            ? {
                connect: args.data.productId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductPicInfo)
  @nestAccessControl.UseRoles({
    resource: "ProductPicInfo",
    action: "delete",
    possession: "any",
  })
  async deleteProductPicInfo(
    @graphql.Args() args: DeleteProductPicInfoArgs
  ): Promise<ProductPicInfo | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ProductInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductInfo",
    action: "read",
    possession: "any",
  })
  async productId(
    @graphql.Parent() parent: ProductPicInfo
  ): Promise<ProductInfo | null> {
    const result = await this.service.getProductId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
