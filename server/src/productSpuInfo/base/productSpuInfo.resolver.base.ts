/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateProductSPUInfoArgs } from "./CreateProductSPUInfoArgs";
import { UpdateProductSPUInfoArgs } from "./UpdateProductSPUInfoArgs";
import { DeleteProductSPUInfoArgs } from "./DeleteProductSPUInfoArgs";
import { ProductSPUInfoFindManyArgs } from "./ProductSPUInfoFindManyArgs";
import { ProductSPUInfoFindUniqueArgs } from "./ProductSPUInfoFindUniqueArgs";
import { ProductSPUInfo } from "./ProductSPUInfo";
import { ProductPicInfoFindManyArgs } from "../../productPicInfo/base/ProductPicInfoFindManyArgs";
import { ProductPicInfo } from "../../productPicInfo/base/ProductPicInfo";
import { BrandInfo } from "../../brandInfo/base/BrandInfo";
import { ProductCategory } from "../../productCategory/base/ProductCategory";
import { SupplierInfo } from "../../supplierInfo/base/SupplierInfo";
import { ProductSPUInfoService } from "../productSpuInfo.service";

@graphql.Resolver(() => ProductSPUInfo)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ProductSPUInfoResolverBase {
  constructor(
    protected readonly service: ProductSPUInfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProductSPUInfo",
    action: "read",
    possession: "any",
  })
  async _productSpuInfosMeta(
    @graphql.Args() args: ProductSPUInfoFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProductSPUInfo])
  @nestAccessControl.UseRoles({
    resource: "ProductSPUInfo",
    action: "read",
    possession: "any",
  })
  async productSpuInfos(
    @graphql.Args() args: ProductSPUInfoFindManyArgs
  ): Promise<ProductSPUInfo[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProductSPUInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductSPUInfo",
    action: "read",
    possession: "own",
  })
  async productSpuInfo(
    @graphql.Args() args: ProductSPUInfoFindUniqueArgs
  ): Promise<ProductSPUInfo | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductSPUInfo)
  @nestAccessControl.UseRoles({
    resource: "ProductSPUInfo",
    action: "create",
    possession: "any",
  })
  async createProductSPUInfo(
    @graphql.Args() args: CreateProductSPUInfoArgs
  ): Promise<ProductSPUInfo> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        brandId: args.data.brandId
          ? {
              connect: args.data.brandId,
            }
          : undefined,

        oneCategoryId: args.data.oneCategoryId
          ? {
              connect: args.data.oneCategoryId,
            }
          : undefined,

        supplierId: args.data.supplierId
          ? {
              connect: args.data.supplierId,
            }
          : undefined,

        threeCategoryId: args.data.threeCategoryId
          ? {
              connect: args.data.threeCategoryId,
            }
          : undefined,

        twoCategoryId: args.data.twoCategoryId
          ? {
              connect: args.data.twoCategoryId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductSPUInfo)
  @nestAccessControl.UseRoles({
    resource: "ProductSPUInfo",
    action: "update",
    possession: "any",
  })
  async updateProductSPUInfo(
    @graphql.Args() args: UpdateProductSPUInfoArgs
  ): Promise<ProductSPUInfo | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          brandId: args.data.brandId
            ? {
                connect: args.data.brandId,
              }
            : undefined,

          oneCategoryId: args.data.oneCategoryId
            ? {
                connect: args.data.oneCategoryId,
              }
            : undefined,

          supplierId: args.data.supplierId
            ? {
                connect: args.data.supplierId,
              }
            : undefined,

          threeCategoryId: args.data.threeCategoryId
            ? {
                connect: args.data.threeCategoryId,
              }
            : undefined,

          twoCategoryId: args.data.twoCategoryId
            ? {
                connect: args.data.twoCategoryId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductSPUInfo)
  @nestAccessControl.UseRoles({
    resource: "ProductSPUInfo",
    action: "delete",
    possession: "any",
  })
  async deleteProductSPUInfo(
    @graphql.Args() args: DeleteProductSPUInfoArgs
  ): Promise<ProductSPUInfo | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductPicInfo])
  @nestAccessControl.UseRoles({
    resource: "ProductPicInfo",
    action: "read",
    possession: "any",
  })
  async picInfoProductId(
    @graphql.Parent() parent: ProductSPUInfo,
    @graphql.Args() args: ProductPicInfoFindManyArgs
  ): Promise<ProductPicInfo[]> {
    const results = await this.service.findPicInfoProductId(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => BrandInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BrandInfo",
    action: "read",
    possession: "any",
  })
  async brandId(
    @graphql.Parent() parent: ProductSPUInfo
  ): Promise<BrandInfo | null> {
    const result = await this.service.getBrandId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ProductCategory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductCategory",
    action: "read",
    possession: "any",
  })
  async oneCategoryId(
    @graphql.Parent() parent: ProductSPUInfo
  ): Promise<ProductCategory | null> {
    const result = await this.service.getOneCategoryId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SupplierInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SupplierInfo",
    action: "read",
    possession: "any",
  })
  async supplierId(
    @graphql.Parent() parent: ProductSPUInfo
  ): Promise<SupplierInfo | null> {
    const result = await this.service.getSupplierId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ProductCategory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductCategory",
    action: "read",
    possession: "any",
  })
  async threeCategoryId(
    @graphql.Parent() parent: ProductSPUInfo
  ): Promise<ProductCategory | null> {
    const result = await this.service.getThreeCategoryId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ProductCategory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductCategory",
    action: "read",
    possession: "any",
  })
  async twoCategoryId(
    @graphql.Parent() parent: ProductSPUInfo
  ): Promise<ProductCategory | null> {
    const result = await this.service.getTwoCategoryId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
