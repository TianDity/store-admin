/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateBrandInfoArgs } from "./CreateBrandInfoArgs";
import { UpdateBrandInfoArgs } from "./UpdateBrandInfoArgs";
import { DeleteBrandInfoArgs } from "./DeleteBrandInfoArgs";
import { BrandInfoFindManyArgs } from "./BrandInfoFindManyArgs";
import { BrandInfoFindUniqueArgs } from "./BrandInfoFindUniqueArgs";
import { BrandInfo } from "./BrandInfo";
import { ProductInfoFindManyArgs } from "../../productInfo/base/ProductInfoFindManyArgs";
import { ProductInfo } from "../../productInfo/base/ProductInfo";
import { BrandInfoService } from "../brandInfo.service";

@graphql.Resolver(() => BrandInfo)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class BrandInfoResolverBase {
  constructor(
    protected readonly service: BrandInfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BrandInfo",
    action: "read",
    possession: "any",
  })
  async _brandInfosMeta(
    @graphql.Args() args: BrandInfoFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BrandInfo])
  @nestAccessControl.UseRoles({
    resource: "BrandInfo",
    action: "read",
    possession: "any",
  })
  async brandInfos(
    @graphql.Args() args: BrandInfoFindManyArgs
  ): Promise<BrandInfo[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BrandInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BrandInfo",
    action: "read",
    possession: "own",
  })
  async brandInfo(
    @graphql.Args() args: BrandInfoFindUniqueArgs
  ): Promise<BrandInfo | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BrandInfo)
  @nestAccessControl.UseRoles({
    resource: "BrandInfo",
    action: "create",
    possession: "any",
  })
  async createBrandInfo(
    @graphql.Args() args: CreateBrandInfoArgs
  ): Promise<BrandInfo> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BrandInfo)
  @nestAccessControl.UseRoles({
    resource: "BrandInfo",
    action: "update",
    possession: "any",
  })
  async updateBrandInfo(
    @graphql.Args() args: UpdateBrandInfoArgs
  ): Promise<BrandInfo | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BrandInfo)
  @nestAccessControl.UseRoles({
    resource: "BrandInfo",
    action: "delete",
    possession: "any",
  })
  async deleteBrandInfo(
    @graphql.Args() args: DeleteBrandInfoArgs
  ): Promise<BrandInfo | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductInfo])
  @nestAccessControl.UseRoles({
    resource: "ProductInfo",
    action: "read",
    possession: "any",
  })
  async productBrandId(
    @graphql.Parent() parent: BrandInfo,
    @graphql.Args() args: ProductInfoFindManyArgs
  ): Promise<ProductInfo[]> {
    const results = await this.service.findProductBrandId(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
