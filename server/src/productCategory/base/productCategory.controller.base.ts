/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductCategoryService } from "../productCategory.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Public } from "../../decorators/public.decorator";
import { ProductCategoryCreateInput } from "./ProductCategoryCreateInput";
import { ProductCategoryWhereInput } from "./ProductCategoryWhereInput";
import { ProductCategoryWhereUniqueInput } from "./ProductCategoryWhereUniqueInput";
import { ProductCategoryFindManyArgs } from "./ProductCategoryFindManyArgs";
import { ProductCategoryUpdateInput } from "./ProductCategoryUpdateInput";
import { ProductCategory } from "./ProductCategory";
import { ProductInfoFindManyArgs } from "../../productInfo/base/ProductInfoFindManyArgs";
import { ProductInfo } from "../../productInfo/base/ProductInfo";
import { ProductInfoWhereUniqueInput } from "../../productInfo/base/ProductInfoWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ProductCategoryControllerBase {
  constructor(
    protected readonly service: ProductCategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "ProductCategory",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductCategory })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(
    @common.Body() data: ProductCategoryCreateInput
  ): Promise<ProductCategory> {
    return await this.service.create({
      data: data,
      select: {
        categoryCode: true,
        categoryLevel: true,
        categoryName: true,
        categoryStatus: true,
        createdAt: true,
        id: true,
        parentId: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "ProductCategory",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductCategory] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(ProductCategoryFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<ProductCategory[]> {
    const args = plainToClass(ProductCategoryFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        categoryCode: true,
        categoryLevel: true,
        categoryName: true,
        categoryStatus: true,
        createdAt: true,
        id: true,
        parentId: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "ProductCategory",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: ProductCategoryWhereUniqueInput
  ): Promise<ProductCategory | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        categoryCode: true,
        categoryLevel: true,
        categoryName: true,
        categoryStatus: true,
        createdAt: true,
        id: true,
        parentId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "ProductCategory",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: ProductCategoryWhereUniqueInput,
    @common.Body() data: ProductCategoryUpdateInput
  ): Promise<ProductCategory | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          categoryCode: true,
          categoryLevel: true,
          categoryName: true,
          categoryStatus: true,
          createdAt: true,
          id: true,
          parentId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "ProductCategory",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: ProductCategoryWhereUniqueInput
  ): Promise<ProductCategory | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          categoryCode: true,
          categoryLevel: true,
          categoryName: true,
          categoryStatus: true,
          createdAt: true,
          id: true,
          parentId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @common.Get("/:id/productOneCategoryId")
  @ApiNestedQuery(ProductInfoFindManyArgs)
  async findManyProductOneCategoryId(
    @common.Req() request: Request,
    @common.Param() params: ProductCategoryWhereUniqueInput
  ): Promise<ProductInfo[]> {
    const query = plainToClass(ProductInfoFindManyArgs, request.query);
    const results = await this.service.findProductOneCategoryId(params.id, {
      ...query,
      select: {
        auditStatus: true,
        averageCost: true,
        barCode: true,

        brandId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        descript: true,
        id: true,

        oneCategoryId: {
          select: {
            id: true,
          },
        },

        price: true,
        productCore: true,
        productDetail: true,
        productionDate: true,
        productKeywords: true,
        productName: true,
        productSubtitle: true,
        publishStatus: true,
        purchasePrice: true,
        qrCode: true,
        shelfLife: true,

        supplierId: {
          select: {
            id: true,
          },
        },

        threeCategoryId: {
          select: {
            id: true,
          },
        },

        twoCategoryId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "ProductCategory",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/productOneCategoryId")
  async connectProductOneCategoryId(
    @common.Param() params: ProductCategoryWhereUniqueInput,
    @common.Body() body: ProductInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOneCategoryId: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "ProductCategory",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/productOneCategoryId")
  async updateProductOneCategoryId(
    @common.Param() params: ProductCategoryWhereUniqueInput,
    @common.Body() body: ProductInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOneCategoryId: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "ProductCategory",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/productOneCategoryId")
  async disconnectProductOneCategoryId(
    @common.Param() params: ProductCategoryWhereUniqueInput,
    @common.Body() body: ProductInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productOneCategoryId: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @Public()
  @common.Get("/:id/productThreeCategoryId")
  @ApiNestedQuery(ProductInfoFindManyArgs)
  async findManyProductThreeCategoryId(
    @common.Req() request: Request,
    @common.Param() params: ProductCategoryWhereUniqueInput
  ): Promise<ProductInfo[]> {
    const query = plainToClass(ProductInfoFindManyArgs, request.query);
    const results = await this.service.findProductThreeCategoryId(params.id, {
      ...query,
      select: {
        auditStatus: true,
        averageCost: true,
        barCode: true,

        brandId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        descript: true,
        id: true,

        oneCategoryId: {
          select: {
            id: true,
          },
        },

        price: true,
        productCore: true,
        productDetail: true,
        productionDate: true,
        productKeywords: true,
        productName: true,
        productSubtitle: true,
        publishStatus: true,
        purchasePrice: true,
        qrCode: true,
        shelfLife: true,

        supplierId: {
          select: {
            id: true,
          },
        },

        threeCategoryId: {
          select: {
            id: true,
          },
        },

        twoCategoryId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "ProductCategory",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/productThreeCategoryId")
  async connectProductThreeCategoryId(
    @common.Param() params: ProductCategoryWhereUniqueInput,
    @common.Body() body: ProductInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productThreeCategoryId: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "ProductCategory",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/productThreeCategoryId")
  async updateProductThreeCategoryId(
    @common.Param() params: ProductCategoryWhereUniqueInput,
    @common.Body() body: ProductInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productThreeCategoryId: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "ProductCategory",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/productThreeCategoryId")
  async disconnectProductThreeCategoryId(
    @common.Param() params: ProductCategoryWhereUniqueInput,
    @common.Body() body: ProductInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productThreeCategoryId: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @Public()
  @common.Get("/:id/productTwoCategoryId")
  @ApiNestedQuery(ProductInfoFindManyArgs)
  async findManyProductTwoCategoryId(
    @common.Req() request: Request,
    @common.Param() params: ProductCategoryWhereUniqueInput
  ): Promise<ProductInfo[]> {
    const query = plainToClass(ProductInfoFindManyArgs, request.query);
    const results = await this.service.findProductTwoCategoryId(params.id, {
      ...query,
      select: {
        auditStatus: true,
        averageCost: true,
        barCode: true,

        brandId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        descript: true,
        id: true,

        oneCategoryId: {
          select: {
            id: true,
          },
        },

        price: true,
        productCore: true,
        productDetail: true,
        productionDate: true,
        productKeywords: true,
        productName: true,
        productSubtitle: true,
        publishStatus: true,
        purchasePrice: true,
        qrCode: true,
        shelfLife: true,

        supplierId: {
          select: {
            id: true,
          },
        },

        threeCategoryId: {
          select: {
            id: true,
          },
        },

        twoCategoryId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "ProductCategory",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/productTwoCategoryId")
  async connectProductTwoCategoryId(
    @common.Param() params: ProductCategoryWhereUniqueInput,
    @common.Body() body: ProductInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productTwoCategoryId: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "ProductCategory",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/productTwoCategoryId")
  async updateProductTwoCategoryId(
    @common.Param() params: ProductCategoryWhereUniqueInput,
    @common.Body() body: ProductInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productTwoCategoryId: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "ProductCategory",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/productTwoCategoryId")
  async disconnectProductTwoCategoryId(
    @common.Param() params: ProductCategoryWhereUniqueInput,
    @common.Body() body: ProductInfoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productTwoCategoryId: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
